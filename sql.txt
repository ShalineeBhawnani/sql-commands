database creation:-
create database sqltask;

use database:-
use sqltask;

table creation on database:-
CREATE TABLE Physician (
  PhysicianID INTEGER PRIMARY KEY NOT NULL,
  Name TEXT NOT NULL,
  Position TEXT NOT NULL); 
  
  CREATE TABLE Department (
  DepartmentID INTEGER PRIMARY KEY NOT NULL,
  Name TEXT NOT NULL,
  Head INTEGER NOT NULL
    CONSTRAINT fk_Physician_PhysicianID REFERENCES Physician(PhysicianID)
);

CREATE TABLE Affiliated_With (
  Physician INTEGER NOT NULL
    CONSTRAINT fk_Physician_PhysicianID REFERENCES Physician(PhysicianID),
  Department INTEGER NOT NULL
    CONSTRAINT fk_Department_DepartmentID REFERENCES Department(DepartmentID),
  Affiliation BOOLEAN NOT NULL,
  PRIMARY KEY(Physician, Department)
);

CREATE TABLE Patient (
  Patient_id INTEGER PRIMARY KEY NOT NULL,
  Name TEXT NOT NULL,
  Address TEXT NOT NULL,
  Consulted_Physician INTEGER NOT NULL
    CONSTRAINT fk_Physician_PhysicianID REFERENCES Physician(PhysicianID)
	);
	
delete all table for making changes in id:-

drop table Affiliated_With;
drop table Patient;
drop table Department;
drop table Physician;

again create table with auto-increment primary key field-
for sql--
CREATE TABLE Physician (
  PhysicianID int NOT NULL AUTO_INCREMENT,
  Name TEXT NOT NULL,
  Position TEXT NOT NULL); 
  
 for postgrey sql--
 CREATE TABLE Physician (
  PhysicianID SERIAL NOT NULL PRIMARY KEY,
  Name TEXT NOT NULL,
  Position TEXT NOT NULL); 
  
  CREATE TABLE Department (
  DepartmentID SERIAL NOT NULL PRIMARY KEY,
  Name TEXT NOT NULL,
  Head INTEGER NOT NULL
    CONSTRAINT fk_Physician_PhysicianID REFERENCES Physician(PhysicianID)
);

CREATE TABLE Affiliated_With (
  Physician INTEGER NOT NULL
    CONSTRAINT fk_Physician_PhysicianID REFERENCES Physician(PhysicianID),
  Department INTEGER NOT NULL
    CONSTRAINT fk_Department_DepartmentID REFERENCES Department(DepartmentID),
  Affiliation BOOLEAN NOT NULL,
  PRIMARY KEY(Physician, Department)
);
CREATE TABLE Patient (
  Patient_id SERIAL NOT NULL PRIMARY KEY,
  Name TEXT NOT NULL,
  Address TEXT NOT NULL,
  Consulted_Physician INTEGER NOT NULL
    CONSTRAINT fk_Physician_PhysicianID REFERENCES Physician(PhysicianID)
	);
	
inserting values in tables
	
INSERT INTO Physician (Name,Position) VALUES ( 'priya', 'Attending Physician');
INSERT INTO Physician (Name,Position) VALUES ( 'suman', 'Surgical Attending Physician');

insert multiple values in table -
INSERT INTO Physician (Name,Position)
VALUES
   ('priya', 'Attending Physician'),
   ('sonu', 'Attending Physician'),
   ('neha', 'Head Chief of Medicine');
   
select data from a tables:-
1) SELECT * FROM Physician;
2) SELECT name, position
FROM Physician;
3) SELECT DISTINCT position
FROM Physician;

where condition applied:-
SELECT * FROM Physician
WHERE Position='Surgical Attending Physician';

inserting data in another table for making relationship:-
INSERT INTO Department (Name,Head) VALUES ('General Medicine',4);
INSERT INTO Department (Name,Head) VALUES ('Psychiatry',2);

deleteing all row of department table:-
delete from department;  

inner/sub query:-
select * from Physician
where position = (select position from Physician where name='priya');

joins 
CREATE TABLE Departments (
  DepartmentId SERIAL NOT NULL PRIMARY KEY,
  Name TEXT NOT NULL);
  
CREATE TABLE Employee (
  EmployeeID  SERIAL NOT NULL PRIMARY KEY,
  Name TEXT NOT NULL,
  DepartmentId INTEGER NOT NULL
    CONSTRAINT fk_Department_ID REFERENCES Departments(DepartmentId)
);
inserting data in tables 
department data:-
INSERT INTO Departments (Name)
VALUES
   ('CSS'),
   ('Electronics'),
   ('MECH'),
   ('CIVIL'),
   ('Automobile')
   ;

employee data:-
INSERT INTO Employee (Name,departmentId)
VALUES
   ('priya',1),
   ('sonu',2),
   ('neha',1),
   ('sona',5),
   ('gangga',3)
   ;
   
 which will satisfied this condition that only will showing in this table-
select *
from employee,departments
where employee.departmentId = Departments.departmentId;

inner join divided in 3 parts 

equi-join
select name,name   
from employee emp,departments dept
where emp.departmentId = dept.departmentId;

result ambiguous bsc of name field.

select emp.name,dept.name
from employee emp,departments dept
where emp.departmentId = dept.departmentId;

alter table employee 

ALTER TABLE employee
ADD sal money;
delete column from table :-
ALTER TABLE employee DROP COLUMN sal;
ADD sal integer;

creating salary gread table for performing non -equi-join

non -equi-join :-CREATE TABLE SalGrade (
 losal INTEGER,
 hisal INTEGER,
 grade INTEGER
);

inser data 
INSERT INTO SalGrade (losal,hisal,grade)
VALUES
   (1000,10000,1),
   (20000,30000,2),
   (40000,50000,3)
   
   ;
   
   
  SELECT name,sal, grade
 FROM employee,salgrade
  WHERE grade between 1 and 2
  and sal between 1000 and 10000;

postgrey:-

CREATE TABLE candidate_qualification(
  id SERIAL NOT NULL,
  candidate_id SERIAL NOT NULL PRIMARY KEY,
  diploma BOOLEAN NOT NULL,
  degree_name varchar(10) NOT NULL,
  is_degree_name_verified BOOLEAN NOT NULL,
  employee_decipline varchar(100) NOT NULL,
  is_employee_decipline_verified BOOLEAN NOT NULL,
  passing_year int NOT NULL,
  is_passing_year_verified BOOLEAN NOT NULL,
  aggr_per double precision DEFAULT NULL,
  final_year_per DOUBLE PRECISION NULL,
  is_final_year_per_verified BOOLEAN NOT NULL,
  training_institute varchar(20) NOT NULL,
  is_training_institute_verified BOOLEAN NOT NULL,
  training_duration_month int DEFAULT NULL,
  is_training_duration_month_verified BOOLEAN NOT NULL,
  other_training varchar(255) DEFAULT NULL,
  is_other_training_verified BOOLEAN NOT NULL,
  creator_stamp Timestamp DEFAULT NULL);
  
sql:-

CREATE TABLE fellowship_candidates (
  id int(11) NOT NULL,
  first_name varchar(100) NOT NULL,
  middle_name varchar(100) DEFAULT NULL,
  last_name varchar(100) NOT NULL,
  email varchar(50) NOT NULL,
  mobile_num bigint(20) NOT NULL,
  hired_city varchar(50) NOT NULL,
  hired_date datetime NOT NULL,
  degree varchar(50) NOT NULL,
  aggr_per double DEFAULT NULL,
  current_pincode int(11) DEFAULT NULL,
  permanent_pincode int(11) DEFAULT NULL,
  hired_lab varchar(20) DEFAULT NULL,
  attitude_remark varchar(15) DEFAULT NULL,
  communication_remark varchar(15) DEFAULT NULL,
  knowledge_remark varchar(15) DEFAULT NULL,
  birth_date date NOT NULL,
  is_birth_date_verified int (1) DEFAULT 0,
  parent_name varchar(50) DEFAULT NULL,
  parent_occupation varchar(100) NOT NULL,
  parent_mobile_num bigint(20) NOT NULL,
  parent_annual_sal double DEFAULT NULL,
  local_addr varchar(255) NOT NULL,
  permanent_addr varchar(150) DEFAULT NULL,
  photo_path varchar(500) DEFAULT NULL,
  joining_date date DEFAULT NULL,
  candidate_status varchar(20) NOT NULL,
  personal_info_filled int (3) DEFAULT 0,
  bank_info_filled int (3) DEFAULT 0,
  educational_info_filled int (3) DEFAULT 0,
  doc_status varchar(20) DEFAULT NULL,
  remark varchar(150) DEFAULT NULL,
  creator_stamp datetime DEFAULT NULL,
  creator_user int(11) DEFAULT NULL,
  PRIMARY KEY (id)
  age int,
  CHECK (age>14)
) 

added check constraint:-

alter table fellowship_candidates
 add age int check(age>14);
 
 insert into fellowship_candidates values(7, 'pinky', 'kumari', 'rawat', 6656565656, 'banglore','2019-12-02','B.TECH'    , 45.25,6745,4578,'goa', 'Good', 'Good'     , 'Good', '1999-12-13', 1, 'Kiran', 'Farmer'     , 7584962547, 300000, 'Pune', 'Pune'     , 'photo_path', '2019-12-13', 'Good', 1, 1, 1, 'Correct', 'Good', null, 1,'sona.34343@gmail.com ',20);

insert into fellowship_candidates values(4, 'geeta', 'kumari', 'rawat', 6656565656, 'banglore','2019-12-02','B.TECH'    , 45.25,6745,4578,'goa', 'Good', 'Good'     , 'Good', '1999-12-13', 1, 'Kiran', 'Farmer'     , 7584962547, 300000, 'Pune', 'Pune'     , 'photo_path', '2019-12-13', 'Good', 1, 1, 1, 'Correct', 'Good', null, 1,'sona.34343@gmail.com ',14);
insert into fellowship_candidates values(6, 'geeta', 'kumari', 'rawat', 6656565656, 'banglore','2019-12-02','B.TECH'    , 45.25,6745,4578,'goa', 'Good', 'Good'     , 'Good', '1999-12-13', 1, 'Kiran', 'Farmer'     , 7584962547, 300000, 'Pune', 'Pune'     , 'photo_path', '2019-12-13', 'Good', 1, 1, 1, 'Correct', 'Good', null, 1,'sona.34343@gmail.com ',12);
insert into fellowship_candidates values(1, 'deepak', 'Kiran', 'Patil', 'deepak.63584@gmail.com ', 8956748596, 'Pune','2019-12-13','B.E'    , 75.25,5245,5478,'Mumbai', 'Good', 'Good'     , 'Good', '1999-12-13', 1, 'Kiran', 'Farmer'     , 7584962547, 300000, 'Pune', 'Pune'     , 'photo_path', '2019-12-13', 'Good', 1, 1, 1, 'Correct', 'Good', null, 1);

after dropping email i added again email so i need to put email value in last  while inserting new data :-

insert into fellowship_candidates values(2, 'sona', 'raj', 'yadav', 5454657567, 'banglore','2019-12-13','B.TECH'    , 78.25,6745,4578,'Mumbai', 'Good', 'Good'     , 'Good', '1999-12-13', 1, 'Kiran', 'Farmer'     , 7584962547, 300000, 'Pune', 'Pune'     , 'photo_path', '2019-12-13', 'Good', 1, 1, 1, 'Correct', 'Good', null, 1,'sona.34343@gmail.com ');
insert into fellowship_candidates values(13, 'priya', 'kumari', 'yadav', 655453466, 'raipur','2019-12-13','B.E'    , 55.25,8845,0978,'Mumbai', 'Good', 'Good'     , 'Good', '1999-12-13', 1, 'Kiran', 'Farmer'     , 7584962547, 300000, 'Pune', 'Pune'     , 'photo_path', '2019-12-13', 'Good', 1, 1, 1, 'Correct', 'Good', null, 1,'priya@gmail.com ');

select :-
select last_name,email from fellowship_candidates where current_pincode=5245; 
	
CREATE TABLE candidate_qualification(
  id int(11) NOT NULL,
  candidate_id int(11) NOT NULL,
  diploma int (1) DEFAULT 0,
  degree_name varchar(10) NOT NULL,
  is_degree_name_verified int (1) DEFAULT 0,
  employee_decipline varchar(100) NOT NULL,
  is_employee_decipline_verified int (1) DEFAULT 0,
  passing_year int(11) NOT NULL,
  is_passing_year_verified int (1) DEFAULT 0,
  aggr_per double DEFAULT NULL,
  final_year_per double DEFAULT NULL,
  is_final_year_per_verified int (1) DEFAULT 0,
  training_institute varchar(20) NOT NULL,
  is_training_institute_verified int (1) DEFAULT 0,
  training_duration_month int(3) DEFAULT NULL,
  is_training_duration_month_verified int (1) DEFAULT 0,
  other_training varchar(255) DEFAULT NULL,
  is_other_training_verified int (1) DEFAULT 0,
  creator_stamp datetime DEFAULT NULL,
  creator_user int(11) DEFAULT NULL,
    KEY `FK_candidate_qual_candidate_id` (`candidate_id`),
  CONSTRAINT `FK_candidate_qual_candidate_id` FOREIGN KEY (`candidate_id`) REFERENCES `fellowship_candidates` (`id`),
 PRIMARY KEY (id)
)

insert into candidate_qualification values(2,2,1,'CSS',1, 'reguler',1,2020,1,78.90,89.09,1,'brizlabe',1,3,1,'jspider',1,null,1)
insert into candidate_qualification values(2,2,1,'CSS',1, 'reguler',1,2020,1,78.90,89.09,1,'brizlabe',1,3,1,'jspider',1,null,1)
insert into candidate_qualification values(5,5,1,'CIVIL',1, 'irreguler',0,2019,1,50.50,45.59,1,'XYZ',1,3,1,'ABC',1,'2019-01-02' ,1)


CREATE TABLE company(
  id int(11) NOT NULL,
  name int(11) NOT NULL,
  address varchar(150) DEFAULT NULL,
  location varchar(50) DEFAULT NULL,
  status int(3) DEFAULT 1,
  creator_stamp datetime DEFAULT NULL,
  creator_user int(11) DEFAULT NULL,
  PRIMARY KEY (id)
)

insert into company values(1,1,'jayanagar', 'banglore',1,'2019-01-02',1)
insert into company values(2,2,'marathalli', 'banglore',2,'2018-05-02',5)
insert into company values(3,3,'HSR', 'banglore',1,'2020-12-02',10)

CREATE TABLE candidate_docs(
  id int(11) NOT NULL,
  candidate_id int(11) NOT NULL,
  doc_type varchar(20) DEFAULT NULL,
  doc_path varchar(500) DEFAULT NULL,
  status int(3) DEFAULT 1,
  creator_stamp datetime DEFAULT NULL,
  creator_user int(11) DEFAULT NULL,
    KEY `FK_candidate_docs_candidate_id` (`candidate_id`),
  CONSTRAINT `FK_candidate_docs_candidate_id` FOREIGN KEY (`candidate_id`) REFERENCES `fellowship_candidates` (`id`),
  PRIMARY KEY (id)
)

insert into candidate_docs values(1,1,'XML', '/doc/XML',1,'2020-12-02',1)
insert into candidate_docs values(2,2,'XML', '/doc/XML',1,'2020-11-06',2)
insert into candidate_docs values(2,3,'html', '/doc/html',1,'2019-05-02',1)


inner join:- between  fellowship_candidates,candidate_qualification
select * from fellowship_candidates,candidate_qualification where fellowship_candidates.id=candidate_qualification.candidate_id;
select first_name,candidate_id,training_institute from fellowship_candidates,candidate_qualification where fellowship_candidates.id=candidate_qualification.candidate_id;

inner join using ANSI join :-
select * from fellowship_candidates,candidate_qualification 
where fellowship_candidates join candidate_qualification
on fellowship_candidates.id = candidate_qualification.id;

left outer join :-
select * from fellowship_candidates fallow left outer join candidate_qualification candidate
on fallow.id = candidate.id;

right outer join :-
select * from fellowship_candidates fallow right outer join candidate_qualification candidate
on fallow.id = candidate.id;

full outer join :-
select * from fellowship_candidates full outer join candidate_qualification
on fellowship_candidates.id= candidate_qualification.id ;

update column:-
 update fellowship_candidates set first_name='nilima' where id=1;
 delete from fellowship_candidates where id=1;
 
 distinct 
 select distinct first_name from fellowship_candidates;
 
 order by:-
 select last_name from fellowship_candidates order by id desc;
 select last_name from fellowship_candidates order by id;
 
 limit :
 select last_name from fellowship_candidates order by id desc limit 2;

like operator:-
select last_name from fellowship_candidates where last_name like 'a%';

min-max:
select max(parent_annual_sal) from fellowship_candidates;

logical operators:-
select parent_annual_sal from fellowship_candidates where parent_annual_sal=300000;
select parent_annual_sal from fellowship_candidates where parent_annual_sal !=300000;

 select parent_annual_sal from fellowship_candidates where parent_annual_sal>300000;
 select parent_annual_sal from fellowship_candidates where parent_annual_sal<=300000 && sal>=400000;
 
 alter table add coulmn:
 alter table fellowship_candidates add email varchar(40);
 ALTER TABLE fellowship_candidates ADD email VARCHAR(40) AFTER middle_name; 
 
 delete coulmn:-
 ALTER TABLE fellowship_candidates DROP email;
 
 delete row:-
 DELETE from fellowship_candidates where middle_name=Kiran;
 
 sub query:-
 select *  from fellowship_candidates 
 where first_name = (select first_name from fellowship_candidates where last_name='pankaj');
 
 creating new user :
 CREATE USER 'shalinee'@'localhost' IDENTIFIED BY 'Shalinee5@';
CREATE USER 'sonu'@'localhost' IDENTIFIED BY 'SonuPrasad@5';
 
 granting all access:-
 GRANT ALL PRIVILEGES ON * . * TO 'shalinee'@'localhost';
 FLUSH PRIVILEGES;

GRANT CREATE on mysql.candidate_qualification TO 'sonu'@'localhost';
 FLUSH PRIVILEGES;
 
 revoke access:
 REVOKE CREATE on mysql.candidate_qualification from 'sonu'@'localhost';
 
 show user permistion:
 SHOW GRANTS FOR 'sonu'@'localhost';
 
  show  current user permistion:
 SHOW GRANTS FOR CURRENT_USER;
 
 drop user :
 drop user 'shalinee'@'localhost';
 
 login with created user:
 mysql -u shalinee -p
 
 function:-
 create or replace function mul( A int, B int)
 Return int
 is
 c int ,
 begin 
 c:=a*b,
 return c,
 end mul;
 
 stored procedure:-
 
 create or replace procedure p_count
 is/as
 ecount int
 begin
 select count(*) into ecount from tablename
 where departmentno=10
 dbms_output.put_line('numbers:' || ecount);
 end p_count;
 /
 
 if statement :
 select id,first_name,aggr_per,
  if(aggr_per >= 46,"pass","fail") as result
  from fellowship_candidates;

case :-
select first_name, aggr_per,
CASE
    WHEN aggr_per=30 THEN THEN 'pass'
    WHEN aggr_per>=60 THEN 'pass with 1st division'
    WHEN aggr_per>=90THEN 'pass with distinction'
    ELSE fail
END
from fellowship_candidates;
